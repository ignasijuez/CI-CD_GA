name: Pipeline

#events
on:
  push:
    branches: [ "main" ]
    #when someone pushes to branch main it triggers this workflow
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      REPO_URL:
        description: 'URL del repositorio'
        default: 'https://github.com/ignasijuez/CICD_GA.git'
        required: true
      BRANCH:
        description: 'Branch a clonar'
        default: 'main'
        required: true
      DOCKER_IMAGE:
        description: 'Nombre de la imagen de Docker'
        default: 'juezignasi/ga-app:latest'
        required: true

jobs:
  checkout: 
    runs-on: self-hosted
    steps:
      #- name: Check hour and fail if inside time range
      #  run: |
      #    currentHour=$(date +%H)
      #    if [ "$currentHour" -ge 2 ] && [ "$currentHour" -lt 3 ]; then
      #      echo "El pipeline se termina porque no es la hora adecuada"
      #      exit 1
      #    fi
      
      - name: checkout
        uses: actions/checkout@v4 #predefined action from the marketplace
        with: 
          repository: ${{ inputs.REPO_URL }}
          ref: ${{ inputs.BRANCH }}
          
      #- name: List repo contents
      #  run: ls -R /runner/_work/CICD_GA/CICD_GA

  setup:
    runs-on: self-hosted
    needs: checkout
    steps:
      - name: List Maven dependencies
        run: ls -R ~/.m2/repository

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      

  Prebuild-sonarScannerCloudScan:
    runs-on: self-hosted
    needs: setup
    outputs:
      TASK_ID: ${{ steps.extract_task_id.outputs.task_id }} # Define el output
    steps:
      - name: Verify Maven
        run: mvn -version

      - name: Run SonarScanner
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=ignasijuez_github \
            -Dsonar.organization=ignasijuez \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/*.java \
            -Dsonar.java.binaries=none \
            -Dsonar.qualitygate.wait=false

      - name: Locate report-task.txt
        run: find . -name "report-task.txt"

      - name: Extract SonarCloud Task ID
        id: extract_task_id
        run: |
          if [ ! -f .scannerwork/report-task.txt ]; then
            echo "SonarCloud report-task.txt not found!"
            exit 1
          fi
          task_id=$(grep 'ceTaskId' .scannerwork/report-task.txt | cut -d '=' -f 2)
          echo "Task ID (local): $task_id"
          echo "::set-output name=task_id::$task_id"
        continue-on-error: false

  Prebuild-Dependency-Analysis:
    runs-on: self-hosted
    needs: [setup, Prebuild-sonarScannerCloudScan]
    defaults:
      run:
        working-directory: /runner/shared-workspace
    steps:
      - name: Run OWASP Dependency Check
        id: dependency_check
        run: |
          mvn org.owasp:dependency-check-maven:check \
              -Dformat=HTML \
              -DautoUpdate=false \
              -Dexcludes=com.h2database:h2 \
              -DfailBuildOnCVSS=1.0 \
              -DoutputDirectory=dependency-check-report #|| exit_code=$?
          #echo "exit_code=$exit_code" >> $GITHUB_ENV
        continue-on-error: true

      - name: Upload Dependency-Check Report
        if: always() # Esto asegura que el informe se suba incluso si el anÃ¡lisis falla
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report/
      
      # Determine Dependency-Check Result
      - name: Determine Dependency Check Result
        run: |
          if [ "${{ env.exit_code }}" -ne 0 ]; then
            echo "Dependency validation failed. Vulnerabilities detected!"
            echo "UNSTABLE: Dependency validation did not pass."
          else
            echo "STABLE: Dependency validation passed successfully."
          fi


  build:
      runs-on: self-hosted
      needs: [setup, Prebuild-sonarScannerCloudScan]
      outputs:
        BUILD_STATUS: ${{ steps.set_build_status.outputs.BUILD_STATUS }}
        BUILD_ERROR: ${{ steps.set_build_status.outputs.BUILD_ERROR }}
      steps:
      - name: List Maven dependencies
        run: ls -R ~/.m2/repository
      - name: Build
        run: |
          echo 'Clean and package the application'
          mvn spring-javaformat:apply
          mvn clean package

  #setup2:
  #  runs-on: self-hosted
  #  needs: build
  #  steps:
  #    - name: home
  #      run: |
  #        echo $HOME
  #        ls -la
  #
  #    - name: Setup Kubernetes
  #      uses: ./.github/actions/setup-k8s  

  docker-build-push:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: juezignasi/ga-app:latest

  Check-SonarCloud-Results:
    runs-on: self-hosted
    needs: [docker-build-push, Prebuild-sonarScannerCloudScan, Prebuild-Dependency-Analysis]
    steps:
      - name: Check SonarCloud Task Status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          TASK_ID: ${{ needs.Prebuild-sonarScannerCloudScan.outputs.TASK_ID }}
        run: |
          if [ -z "$TASK_ID" ]; then
            echo "No Task ID found, skipping SonarCloud status check."
            exit 1
          fi
          
          echo "Checking status for Task ID: $TASK_ID"

          status=""
          timeoutMinutes=10
          pollIntervalSeconds=15
          elapsedTime=0
          
          # Poll SonarCloud until the task is completed
          while [ "$elapsedTime" -lt $((timeoutMinutes * 60)) ]; do
            response=$(curl -s -H "Authorization: Bearer $SONAR_TOKEN" "https://sonarcloud.io/api/ce/task?id=$TASK_ID")
            status=$(echo $response | jq -r '.task.status')
            echo "SonarCloud task status: $status"
            
            if [ "$status" == "SUCCESS" ]; then
              echo "SonarCloud analysis completed successfully."
              break
            elif [ "$status" == "FAILED" ]; then
              echo "SonarCloud analysis failed!"
              exit 1
            fi
            
            sleep $pollIntervalSeconds
            elapsedTime=$((elapsedTime + pollIntervalSeconds))
          done

          if [ "$status" != "SUCCESS" ]; then
            echo "SonarCloud analysis did not complete in time!"
            exit 1
          fi

          echo "SonarCloud analysis completed. Fetching Quality Gate status..."

          # Check Quality Gate status
          response=$(curl -s -H "Authorization: Bearer $SONAR_TOKEN" "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$(echo $response | jq -r '.task.analysisId')")
          quality_gate_status=$(echo $response | jq -r '.projectStatus.status')
          echo "SonarCloud Quality Gate Status: $quality_gate_status"

          if [ "$quality_gate_status" != "OK" ]; then
            echo "SonarCloud Quality Gate failed!"
            exit 1
          fi

          echo "SonarCloud Quality Gate passed successfully."

  deploy-mysql:
    runs-on: self-hosted
    needs: [Check-SonarCloud-Results]
    steps:
      - name: Deploy MySQL
        run: kubectl apply -f github-actions-k8s/mysql-deployment.yml

      - name: Get MySQL Pod Name
        run: |
          MYSQL_POD=$(kubectl get pod -l app=github-mysql-pod -o jsonpath="{.items[0].metadata.name}")
          echo "MYSQL_POD=$MYSQL_POD" >> $GITHUB_ENV

      - name: Wait for MySQL Pod to be Ready
        run: |
          while [[ $(kubectl get pod $MYSQL_POD -o jsonpath="{.status.phase}") != "Running" ]]; do
            echo "Waiting for MySQL pod to be ready..."
            sleep 5
          done
          echo "MySQL pod is ready!"
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Output MySQL Pod Name
        run: echo $MYSQL_POD
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Copy Init Scripts to MySQL Pod
        run: |
          kubectl cp ./src/main/resources/db/mysql_k8s/. $MYSQL_POD:/docker-entrypoint-initdb.d/
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Verify Init Scripts in MySQL Pod
        run: |
          kubectl exec $MYSQL_POD -- ls -la /docker-entrypoint-initdb.d/
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Execute Init Scripts in MySQL Pod
        run: |
          for script in $(kubectl exec $MYSQL_POD -- sh -c 'ls /docker-entrypoint-initdb.d/'); do
            echo "Executing $script in MySQL pod $MYSQL_POD"
            kubectl exec $MYSQL_POD -- sh -c "mysql -u root -e 'source /docker-entrypoint-initdb.d/$script'"
          done
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}
  
  liquibase-update2:
    runs-on: self-hosted
    needs: deploy-mysql
    steps:
      - name: Run Liquibase Update
        run: |
          liquibase \
            --defaultsFile=src/main/resources/liquibase.properties \
            --classpath=src/main/resources/mysql-connector-j-9.1.0.jar \
            update

      - name: Update app
        run: kubectl delete pod -l app=github-petclinic-pod

  deploy-app:
    runs-on: self-hosted
    needs: liquibase-update2
    steps:  
      - name: Deploy PetClinic
        run: kubectl apply -f github-actions-k8s/deployment.yml

      - name: Verify Pods
        run: kubectl get pods -o wide

  final-report:
    runs-on: self-hosted
    needs: [checkout, setup, build, docker-build-push, deploy-mysql, deploy-app]
    if: always()
    steps:
      - name: Generate Final Report
        run: |
          report="{\"jobs\": []}"

          # Append Build Status
          build_status="${{ needs.build.outputs.BUILD_STATUS }}"
          build_error="${{ needs.build.outputs.BUILD_ERROR }}"
          report=$(echo "$report" | jq --arg name "build" --arg status "$build_status" --arg details "$build_error" '.jobs += [{"name": $name, "status": $status, "details": $details}]')

          echo "Final Report: $report"
          curl -X POST -H "Content-Type: application/json" -d "$report" https://httpbin.org/post

