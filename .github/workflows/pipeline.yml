name: Pipeline


#events
on:
  push:
    branches: [ "main" ]
    #when someone pushes to branch main it triggers this workflow
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      REPO_URL:
        description: 'URL del repositorio'
        default: 'https://github.com/ignasijuez/CICD_GA.git'
        required: true
      BRANCH:
        description: 'Branch a clonar'
        default: 'main'
        required: true
      DOCKER_IMAGE:
        description: 'Nombre de la imagen de Docker'
        default: 'juezignasi/ga-app:latest'
        required: true

jobs:
  checkout: 
    runs-on: self-hosted
    steps:
      - name: Check hour and fail if inside time range
        run: |
          currentHour=$(date +%H)
          if [ "$currentHour" -ge 2 ] && [ "$currentHour" -lt 3 ]; then
            echo "El pipeline se termina porque no es la hora adecuada"
            exit 1
          fi

      - name: checkout
        uses: actions/checkout@v4 #predefined action from the marketplace
        with: 
          repository: ${{ inputs.REPO_URL }}
          ref: ${{ inputs.BRANCH }}
  
  setup:
    runs-on: self-hosted
    needs: checkout
    steps:
      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 17 & Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

  build:
      runs-on: self-hosted
      needs: setup
      steps:

      - name: Build
        run: |
          echo 'Clean and package the application'
          mvn spring-javaformat:apply
          mvn clean package

  setup2:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: home
        run: echo $HOME

      - name: Setup Kubernetes
        uses: ./.github/actions/setup-k8s-action.yml

      #- name: Set KUBECONFIG Environment Variable
      #  run: echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      #- name: Verify Kubernetes Context
      #  run: kubectl config get-contexts

      #- name: Set Minikube Context
      #  run: kubectl config use-context minikube

      #- name: Check2
      #  run: kubectl cluster-info

  docker-login:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

  #docker-build-push:
  #  runs-on: self-hosted
  #  needs: [build, docker-login]
  #  steps:
  #    - name: Build and push Docker image
  #      run: |
  #        docker build -t juezignasi/ga-app:latest .
  #        docker push juezignasi/ga-app:latest

  docker-build-push:
    runs-on: self-hosted
    needs: [build, docker-login]
    steps:
      #- name: Verify DOCKER_IMAGE value
      #  run: echo "DOCKER_IMAGE is set to ${{ inputs.DOCKER_IMAGE }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: juezignasi/ga-app:latest

  deploy-mysql:
    runs-on: self-hosted
    needs: [setup2, docker-build-push]
    steps:
      - name: Deploy MySQL
        run: kubectl apply -f github-actions-k8s/mysql-deployment.yml

      - name: Get MySQL Pod Name
        run: |
          MYSQL_POD=$(kubectl get pod -l app=github-mysql-pod -o jsonpath="{.items[0].metadata.name}")
          echo "MYSQL_POD=$MYSQL_POD" >> $GITHUB_ENV

      - name: Wait for MySQL Pod to be Ready
        run: |
          while [[ $(kubectl get pod $MYSQL_POD -o jsonpath="{.status.phase}") != "Running" ]]; do
            echo "Waiting for MySQL pod to be ready..."
            sleep 5
          done
          echo "MySQL pod is ready!"
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Output MySQL Pod Name
        run: echo $MYSQL_POD
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Copy Init Scripts to MySQL Pod
        run: |
          kubectl cp ./src/main/resources/db/mysql_k8s/. $MYSQL_POD:/docker-entrypoint-initdb.d/
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Verify Init Scripts in MySQL Pod
        run: |
          kubectl exec $MYSQL_POD -- ls -la /docker-entrypoint-initdb.d/
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

      - name: Execute Init Scripts in MySQL Pod
        run: |
          for script in $(kubectl exec $MYSQL_POD -- sh -c 'ls /docker-entrypoint-initdb.d/'); do
            echo "Executing $script in MySQL pod $MYSQL_POD"
            kubectl exec $MYSQL_POD -- sh -c "mysql -u root -e 'source /docker-entrypoint-initdb.d/$script'"
          done
        env:
          MYSQL_POD: ${{ env.MYSQL_POD }}

  deploy-app:
    runs-on: self-hosted
    needs: deploy-mysql
    steps:  
      - name: Deploy PetClinic
        run: kubectl apply -f github-actions-k8s/deployment.yml

      - name: Verify Pods
        run: kubectl get pods -o wide

