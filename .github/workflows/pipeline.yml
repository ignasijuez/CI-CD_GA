name: Pipeline


#events
on:
  push:
    branches: [ "main" ]
    #when someone pushes to branch main it triggers this workflow
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v4 #predefined action from the marketplace

    # Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 17 & Maven
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build
      run: |
        echo 'Clean and package the application'
        mvn spring-javaformat:apply
        mvn clean package #-Dspring.datasource.url=jdbc:mysql://localhost/petclinic

    - name: home
      run: echo $HOME

    - name: Set KUBECONFIG Environment Variable
      run: echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Verify Kubernetes Context
      run: kubectl config get-contexts

    - name: Set Minikube Context
      run: kubectl config use-context minikube

    - name: Check2
      run: kubectl cluster-info

    - name: Log in to DockerHub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: Build and push Docker image
      run: |
        docker build -t juezignasi/ga-app:latest .
        docker push juezignasi/ga-app:latest

    - name: Deploy MySQL
      run: kubectl apply -f github-actions-k8s/mysql-deployment.yml

    # Wait for MySQL pod to be ready
    - name: Wait for MySQL to be Ready
      run: kubectl wait --for=condition=ready pod -l app=mysql-ga --timeout=90s

    # Copy SQL Init Scripts to the MySQL pod
    - name: acsd
      run: kubectl get pods -l app=mysql-ga -o wide   # To list all pods with details
    - name: Copy Init Scripts to MySQL
      run: MYSQL_POD=$(kubectl get pod -l app=mysql-ga -o jsonpath="{.items[0].metadata.name}")
    - name: Copy Init Scripts to MySQL1
      run: echo "Detected MySQL pod $MYSQL_POD"
    - name: Copy Init Scripts to MySQL2 
      run: kubectl cp /src/main/resources/db/mysql_k8s/ $MYSQL_POD:/docker-entrypoint-initdb.d/ -n default
    - name: Copy Init Scripts to MySQL3
      run: echo "Init scripts copied successfully."

    # Verify that Init Scripts were copied
    - name: Verify Init Scripts in MySQL Pod
      run: |
        MYSQL_POD=$(kubectl get pod -l app=mysql -o jsonpath="{.items[0].metadata.name}")
        echo "Verifying init scripts in MySQL pod $MYSQL_POD"
        kubectl exec $MYSQL_POD -- ls -la /docker-entrypoint-initdb.d/

    # Execute the Init Scripts Manually (if needed)
    - name: Execute Init Scripts in MySQL
      run: |
        MYSQL_POD=$(kubectl get pod -l app=mysql -o jsonpath="{.items[0].metadata.name}")
        echo "Executing init scripts in MySQL pod $MYSQL_POD"
        for script in $(kubectl exec $MYSQL_POD -- sh -c 'ls /docker-entrypoint-initdb.d/'); do
          echo "Executing $script in MySQL pod $MYSQL_POD"
          kubectl exec $MYSQL_POD -- sh -c "mysql -u root < /docker-entrypoint-initdb.d/$script"
        done

    # Verify that the database is initialized correctly
    - name: Verify Database Initialization
      run: |
        MYSQL_POD=$(kubectl get pod -l app=mysql -o jsonpath="{.items[0].metadata.name}")
        echo "Verifying database initialization in MySQL pod $MYSQL_POD"
        kubectl exec $MYSQL_POD -- mysql -u petclinic -p -e "SHOW TABLES IN petclinic;"

    - name: Deploy PetClinic
      run: kubectl apply -f github-actions-k8s/deployment.yml

    - name: Verify Pods
      run: kubectl get pods -o wide